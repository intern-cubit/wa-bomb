# Python cache and compiled files
__pycache__/
*.py[cod]
*.pyo
*.pyd
drivers/

# Virtual environment
.venv/
env/
venv/

# PyInstaller temporary build directories
backend/build/ # Ignore PyInstaller's temporary 'build' folder inside backend
backend/*.spec # Ignore PyInstaller spec files

# Node.js modules (if not in root, e.g., for frontend)
frontend/node_modules/

# Node.js temporary build directories
frontend/dist/ # <-- ONLY IGNORE if you manually ensure it's built before electron-builder and never commit it.
               # If you want to commit the frontend build for faster CI/CD, remove this.

# Electron-builder output
dist/          # Ignore the final 'dist' output folder generated by electron-builder at the root

# VSCode settings (optional but common)
.vscode/

# OS-specific files
.DS_Store
Thumbs.db

# Log files
*.log

# Environment variables (if you have one)
.env

# ==========================================================
# IMPORTANT: DO NOT IGNORE THESE IF THEY ARE NEEDED BY electron-builder
# ==========================================================

# Make sure the actual backend executable is NOT ignored IF you need it committed
# However, usually the backend executable is regenerated locally, so this line is fine
# as long as you build it before electron-builder.
# If you ARE pushing your pre-built backend executable to GitHub, then uncomment/remove this:
# *.exe

# Your specific backend dist folder needs to be accessible by electron-builder,
# and usually, you DON'T commit PyInstaller 'dist' folders. They are regenerated locally.
# However, electron-builder *must* be able to read them.
# The previous error "ENOENT" means electron-builder couldn't FIND it at runtime,
# not that it couldn't be copied. But if Git is ignoring it and you're relying
# on Git for deployment, it WILL be a problem.

# For your setup, the electron-builder *build process* needs to read
# backend/dist/fastapibackend.exe and frontend/dist/index.html.
# They are *input* for electron-builder.
# So, ensure they exist locally when you run `npm run build`.

# The core problem from the screenshot:
# C:\Users\leela\AppData\Local\Programs\mail\resources\app.a...\fastapibackend.exe ENOENT
# This is NOT about .gitignore. This is about electron-builder *not packaging* the file.
# My previous solution for `files` array in `package.json` addresses this.
# .gitignore prevents it from being *version controlled*.